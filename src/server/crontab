# SERVER CRONTAB
# NOTE: Do not store environment variables in this file!
# They will be sent via email if a cron job fails which could expose sensitive creds
# Instead, place them in `~/.env-crontab` and source that file on
# cron jobs that require environment variables


# GLOBAL SETUP
PATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
MAILTO=justinpaulhammond@gmail.com


# Alchemist (DO NOT use `--greedy` here since it will break Docker in prod)
10 2 * * * cronic alchemist --update
30 2 * * * cronic alchemist --backup --force
45 2 * * * cronic cp "$HOME/alchemist/backup/Brewfile" "$HOME/.dotfiles/src/server/Brewfile"

# Database Backups
0 3 * * * . "$HOME"/.env-crontab; cronic srvinfra export_database_secure easypost-tools-ui-easypost-tools-db-1 "$EASYPOSTTOOLS_DB_ROOT_PASSWORD" easypost_tools "$HOME/sqldumps/easyposttools/easyposttools_$(date +\%F_\%H-\%M-\%S).enc.gz"
1 3 * * * . "$HOME"/.env-crontab; cronic srvinfra export_database_secure el-gozo-de-jesus-elgozodejesus-db-1 "$ELGOZODEJESUS_DB_ROOT_PASSWORD" elgozodejesus "$HOME/sqldumps/elgozodejesus/elgozodejesus_$(date +\%F_\%H-\%M-\%S).enc.gz"
2 3 * * * . "$HOME"/.env-crontab; cronic srvinfra export_database_secure glass-glass-db-1 "$GLASS_DB_ROOT_PASSWORD" glass "$HOME/sqldumps/glass/glass_$(date +\%F_\%H-\%M-\%S).enc.gz"
3 3 * * * . "$HOME"/.env-crontab; cronic srvinfra export_database_secure jones-excavating-jones-excavating-db-1 "$JONESEXCAVATING_DB_ROOT_PASSWORD" jonesexcavating "$HOME/sqldumps/jonesexcavating/jonesexcavating_$(date +\%F_\%H-\%M-\%S).enc.gz"
4 3 * * * . "$HOME"/.env-crontab; cronic srvinfra export_database_secure match-play-match-play-db-1 "$MATCHPLAY_DB_ROOT_PASSWORD" matchplay "$HOME/sqldumps/matchplay/matchplay_$(date +\%F_\%H-\%M-\%S).enc.gz"
# Deep archive backups every 30 days, (must come before cleanup) - NEVER delete
# TODO: This is just dumping all backups to a single dir, break them up into their own dirs
10 3 1 * * cronic find "$HOME"/sqldumps -maxdepth 2 -mindepth 2 -mtime +30 -exec cp '{}' /"$HOME"/sqldumps_deep/ \;
# Cleanup backups older than 30 days (must come last)
15 3 * * * cronic find "$HOME"/sqldumps -maxdepth 2 -mindepth 2 -mtime +30 -delete

# Server Sync (requires SSH key to be present on Server1)
# 0 * * * * . "$HOME"/.keychain/${HOSTNAME}-sh; cronic rsync -a --no-perms --delete ~/harvey/ admin@Server1.local:~/harvey
# 30 3 * * * . "$HOME"/.keychain/${HOSTNAME}-sh; cronic rsync -a --no-perms --delete ~/sqldumps/ admin@Server1.local:~/sqldumps

# Docker
0 3 * * 0 cronic docker system prune -f

# Healthchecks
*/5 * * * * cd "$HOME"/harvey/projects/justintime50/os-scripting && cronic ./src/macos/healthchecks/docker-healthcheck.sh
*/5 * * * * cd "$HOME"/harvey/projects/justintime50/os-scripting && cronic ./src/macos/healthchecks/harvey-healthcheck.sh
*/10 * * * * cd "$HOME"/harvey/projects/justintime50/os-scripting && . "$HOME"/.env-crontab; UPTIME_ROBOT_API_KEY="$UPTIME_ROBOT_API_KEY" cronic venv/bin/python src/macos/healthchecks/docker_uptimerobot_healthcheck.py

# Forks Sync
# 0 2 * * * . "$HOME"/.env-crontab; . "$HOME"/.keychain/${HOSTNAME}-sh; cronic forks-sync --token "$GITHUB_TOKEN" --force

# GitHub Archive
0 1 * * * . "$HOME"/.env-crontab; . "$HOME"/.keychain/${HOSTNAME}-sh; cronic github-archive --users justintime50 --orgs tuneuptechnology --gists justintime50 --clone --pull --forks --token "$GITHUB_TOKEN" --log_level warning

# Pullbug (Personal to Discord)
0 9 * * 1 . "$HOME"/.env-crontab; cronic pullbug --pulls --issues --drafts --github_token "$GITHUB_TOKEN" --github_context users --github_owner Justintime50 --discord --discord_url "$PULLBUG_DISCORD_URL" --log_level warning

# Unifi Config Backups
# TODO: We need a cleanup task here for old backups
0 4 * * 0 . "$HOME"/.keychain/${HOSTNAME}-sh; cronic "$HOME"/harvey/projects/justintime50/os-scripting/src/ubios/backups/download_config_backups.sh /Volumes/home/Backups/Unifi

# 1Password Backups
# 0 5 * * * cronic rsync -a --no-perms --delete "$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/Library/Application Support/1Password/Data/" /Volumes/home/Backups/1Password/

# Logrotate (requires a manually create ~/.logrotate-state file)
0 0 * * * cronic logrotate "$HOME"/.dotfiles/src/server/logrotate-docker-nginx.conf --state "$HOME"/.logrotate-state -f

# EasyPost (take care that these are company resources and not personal)
0 9,12,15 * * 1-5 . "$HOME"/.env-crontab; cronic pullbug --pulls --github_token "$GITHUB_TOKEN" --github_context orgs --github_owner EasyPost --slack --slack_token "$EASYPOST_PULLBUG_SLACK_BOT_TOKEN" --slack_channel "$EASYPOST_PULLBUG_SLACK_CHANNEL" --repos easypost-php,easypost-node,easypost-python,easypost-ruby,easypost-java,easypost-csharp,easypost-go,easyvcr-csharp,easyvcr-java,examples --log_level warning --disable_descriptions --quiet
# 0 9 * 12 * cd "$HOME"/git/playground/AdventOfCodeLeaderboard && cronic python3 leaderboard.py
